/** @jsxImportSource @emotion/react */
// FIXME 0307 - 只讓有 intelligent_analysis 權限的帳號看到 intelligent_analysis 選單，測試過後要移除 iam 相關的程式碼

import { useEffect } from 'react'
import { useDispatch } from 'react-redux'
import { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom'
import { css, Global, useTheme } from '@emotion/react/macro'
import Box from '@mui/material/Box'
import { ConnectedRouter } from 'connected-react-router'
import reset from 'emotion-reset'

import { history, useTypedSelector } from 'app/store'
import ErrorPage from 'components/ErrorPage'
import LoadingPage from 'components/Loader/LoadingPage'
import PrivacyPolicy from 'components/PrivacyPolicy'
import ProductIntro from 'components/ProductionIntro'
import ScrollToTop from 'components/ScrollToTop'
import TermsOfService from 'components/TermsOfService'
import {
  CATEGORY,
  PAGE_ROOT,
  QUERY_STRING,
  STATUS_CODE,
} from 'constants/routes'
import { LAYOUT } from 'constants/styles'
import SignIn, { initAuth } from 'features/_shared/signIn'
import Toast, { closeToast } from 'features/_shared/toast'
import { KolRecommendRoute } from 'features/aiMarketingAssistant/kolRecommend'
import { SocialMediaTagsAnalysisRoute } from 'features/aiMarketingAssistant/socialMediaTagsAnalysis'
import { EventRoutes } from 'features/analytics/event'
import { FunnelRoutes } from 'features/analytics/funnel'
import { NotificationRuleRoutes } from 'features/analytics/notificationRule'
// import UserProfile from 'features/_v1/UserProfile'
import { AudienceRoutes } from 'features/audience'
import { ContentTemplateRoutes } from 'features/contentTemplate'
import { DashboardRoutes } from 'features/dashboard'
import { DataImportRoutes } from 'features/dataImport'
import { InsightRoutes } from 'features/insight'
import { RfmRoutes } from 'features/rfm'
import { SettingsRoutes } from 'features/settings'
import { TagRoutes } from 'features/tag'
import { TagGroupRoutes } from 'features/tagGroup'
import { UserCenterRoutes } from 'features/userCenter'
import { WorkflowRoutes } from 'features/workflow'
import { useIamServiceEntityQuery } from 'services/rtkQuery'

import ContentWrapper from './ContentWrapper'
import Header from './header'
import NotificationBar from './notificationbar'
import Sidebar, { SidebarProvider } from './sidebar'

import 'react-calendar/dist/Calendar.css'

const GlobalStyle = () => {
  const theme = useTheme()

  return (
    <Global
      styles={css`
        ${reset}

        html {
          box-sizing: border-box;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

        *,
        *::before,
        *::after {
          box-sizing: inherit;
        }

        strong,
        b {
          font-weight: 700;
        }

        body {
          margin: 0;
          background-color: ${theme.colors.bgPrimaryGrey};
          color: ${theme.colors.textPrimaryBlue};
          font-size: 0.875rem;
          font-family: 'Roboto', 'PingFang', 'Microsoft JhengHei', 'Helvetica',
            'Arial', sans-serif;
          font-weight: 400;
          letter-spacing: 0.01em;
          line-height: 1.5;
        }
        a {
          text-decoration: none;
        }
        a:link {
          color: inherit;
          text-decoration: inherit;
        }

        a:visited {
          color: inherit;
          text-decoration: inherit;
        }
        @media print {
          body {
            background-color: #fff;
          }
        }
        body::backdrop {
          background-color: #fafafa;
        }

        /* React-Calendar */
        .react-calendar {
          border: none;
        }

        abbr {
          color: ${theme.colors.black86};
          font-family: inherit;
          text-decoration: none;
        }

        .react-calendar__navigation {
          margin-bottom: 4px;
          height: 36px;
        }

        /* 年月(e.g.: 2021年4月) */
        .react-calendar__navigation__label {
          font-weight: 550;
        }
        .react-calendar__navigation button {
          min-width: 36px;
          height: 36px;
        }

        .react-calendar__navigation button:enabled:hover,
        .react-calendar__navigation button:enabled:focus,
        .react-calendar--selectRange .react-calendar__tile--hover {
          background-color: ${theme.colors.bgPaleGrey};
        }

        /* 星期字樣(e.g.: 週一、週二...) */
        .react-calendar__month-view__weekdays__weekday abbr {
          color: ${theme.colors.black38};
        }

        /* 日期數字 */
        .react-calendar__tile--hoverEnd,
        .react-calendar__tile--active,
        .react-calendar__tile:enabled:hover,
        .react-calendar__tile:enabled:focus {
          background-color: ${theme.colors.bgPaleGrey};
        }

        .react-calendar__tile--active:enabled:hover,
        .react-calendar__tile--active:enabled:focus {
          background-color: ${theme.colors.brightBlue};
        }
        .react-calendar__tile--active:enabled:hover abbr {
          color: ${theme.colors.white};
        }
        .react-calendar__tile--active:enabled:focus abbr {
          color: ${theme.colors.white};
        }

        /* 多一個 & 蓋權重 */
        &.react-calendar--selectRange .react-calendar__tile--hover {
          background-color: ${theme.colors.bgPaleGrey};
        }

        .react-calendar__tile--now {
          background-color: ${theme.colors.chartRed};
        }
        /* stylelint-disable-next-line no-descending-specificity */
        .react-calendar__tile--now abbr {
          color: ${theme.colors.white};
        }

        .react-calendar__tile--now:enabled:hover,
        .react-calendar__tile--now:enabled:focus {
          background-color: ${theme.colors.chartRed};
        }

        .react-calendar__tile--now.react-calendar__tile--hover {
          background-color: ${theme.colors.chartRed};
        }
        /* stylelint-disable-next-line no-descending-specificity */
        .react-calendar__tile--now.react-calendar__tile--hover abbr {
          color: ${theme.colors.white};
        }

        /* now & disabled */
        .react-calendar__tile--now.react-calendar__tile:disabled {
          background-color: ${theme.colors.calendarDisabledGrey};
        }
        .react-calendar__tile--now.react-calendar__tile:disabled abbr {
          color: ${theme.colors.black86};
        }
      `}
    />
  )
}

const AuthRoute = ({
  children,
  path,
}: {
  path: string
  children: React.ReactNode
}) => {
  const isAuth = useTypedSelector(state => state.auth.isAuth)

  return (
    <Route
      path={path}
      render={({ location }) =>
        isAuth ? (
          children
        ) : (
          <Redirect
            to={{
              pathname: `/${PAGE_ROOT.signIn}`,
              search: `?${QUERY_STRING.auth.returnURL}=${encodeURIComponent(
                location.pathname + location.search
              )}`,
            }}
          />
        )
      }
    />
  )
}

const AnalyticsRoutes = () => {
  const { path } = useRouteMatch()

  return (
    <Switch>
      <Route path={`${path}/${PAGE_ROOT.rfm}`}>
        <RfmRoutes />
      </Route>

      <Route path={`${path}/${PAGE_ROOT.events}`}>
        <EventRoutes />
      </Route>
      <Route path={`${path}/${PAGE_ROOT.funnel}`}>
        <FunnelRoutes />
      </Route>
      <Route path={`${path}/${PAGE_ROOT.notificationRule}`}>
        <NotificationRuleRoutes />
      </Route>
      <Route path={`${path}/${PAGE_ROOT.dashboard}`}>
        <DashboardRoutes />
      </Route>

      <Redirect to={`${path}/${PAGE_ROOT.rfm}`} />
    </Switch>
  )
}

const CustomerDataManagementRoutes = () => {
  const { path } = useRouteMatch()

  return (
    <Switch>
      <Route path={`${path}/${PAGE_ROOT.audiences}`}>
        <AudienceRoutes />
      </Route>

      <Route path={`${path}/${PAGE_ROOT.tags}`}>
        <TagRoutes />
      </Route>

      <Route path={`${path}/${PAGE_ROOT.tagGroups}`}>
        <TagGroupRoutes />
      </Route>

      <Redirect to={`${path}/${PAGE_ROOT.audiences}`} />
    </Switch>
  )
}

const MarketingAutomationRoutes = () => {
  const { path } = useRouteMatch()

  return (
    <Switch>
      <Route path={`${path}/${PAGE_ROOT.workflows}`}>
        <WorkflowRoutes />
      </Route>

      <Route path={`${path}/${PAGE_ROOT.contentTemplate}`}>
        <ContentTemplateRoutes />
      </Route>

      <Route path={`${path}/${PAGE_ROOT.insight.root}/:type`}>
        <InsightRoutes />
      </Route>

      <Redirect to={`${path}/${PAGE_ROOT.workflows}`} />
    </Switch>
  )
}

const AiMarketingAssistantRoutes = () => {
  const { data: iamServiceEntity = { entities: {}, ids: [] }, isLoading } =
    useIamServiceEntityQuery()
  const { path } = useRouteMatch()

  const iamIntelligentAnalysis =
    iamServiceEntity.entities['intelligent_analysis']

  if (isLoading || !iamIntelligentAnalysis.activated) {
    return null
  }

  return (
    <Switch>
      <Route path={`${path}/${PAGE_ROOT.aiMarketingAssistant.kolRecommend}`}>
        <KolRecommendRoute />
      </Route>

      <Route
        path={`${path}/${PAGE_ROOT.aiMarketingAssistant.socialMediaLabelAnalysis}`}
      >
        <SocialMediaTagsAnalysisRoute />
      </Route>
    </Switch>
  )
}

const App = () => {
  const isInitialAuthDone = useTypedSelector(
    state => state.auth.isInitialAuthDone
  )
  const toast = useTypedSelector(state => state.toast)

  const dispatch = useDispatch()

  useEffect(() => {
    dispatch(initAuth())
  }, [dispatch])

  if (!isInitialAuthDone) {
    return <LoadingPage />
  }

  return (
    <SidebarProvider>
      <ConnectedRouter history={history}>
        <GlobalStyle />
        <ScrollToTop />
        <Toast
          isOpen={toast.isOpen}
          message={toast.message}
          status={toast.status}
          onClose={() => {
            dispatch(closeToast())
          }}
        />
        <Switch>
          <Route path={`/${PAGE_ROOT.signIn}`}>
            <SignIn />
          </Route>

          <Route path={`/${PAGE_ROOT.home}`}>
            <ProductIntro />
          </Route>

          <Route path={`/${PAGE_ROOT.privacyPolicy}`}>
            <PrivacyPolicy />
          </Route>

          <Route path={`/${PAGE_ROOT.termsOfService}`}>
            <TermsOfService />
          </Route>

          <AuthRoute path="/">
            <Box display="flex">
              <Sidebar />
              <Box
                flexBasis="100%"
                flexShrink={1}
                minWidth={LAYOUT.contentMinWidth}
              >
                <Header />
                <ContentWrapper>
                  <NotificationBar />
                  <Switch>
                    <Route path={`/(${STATUS_CODE.map(String).join('|')})`}>
                      <ErrorPage />
                    </Route>

                    {/* <Route path={`/${PAGE_ROOT.userProfile}/:userId`}>
                      <UserProfile fromPage="direct" />
                    </Route> */}

                    <Route path={`/${CATEGORY.cdm}`}>
                      <CustomerDataManagementRoutes />
                    </Route>

                    <Route path={`/${CATEGORY.ma}`}>
                      <MarketingAutomationRoutes />
                    </Route>

                    <Route path={`/${CATEGORY.analytics}`}>
                      <AnalyticsRoutes />
                    </Route>

                    <Route path={`/${CATEGORY.settings}`}>
                      <SettingsRoutes />
                    </Route>

                    <Route path={`/${CATEGORY.dataImport}`}>
                      <DataImportRoutes />
                    </Route>

                    <Route path={`/${CATEGORY.userCenter}`}>
                      <UserCenterRoutes />
                    </Route>

                    <Route path={`/${CATEGORY.aiMarketingAssistant}`}>
                      <AiMarketingAssistantRoutes />
                    </Route>

                    <Redirect to={`/${CATEGORY.dataImport}`} />
                  </Switch>
                </ContentWrapper>
              </Box>
            </Box>
          </AuthRoute>
        </Switch>
      </ConnectedRouter>
    </SidebarProvider>
  )
}

export default App
